package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.List;
import java.util.ArrayList;

import domain.Person;

public class PersonRepository {
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";
    private Connection connection;
    private Statement createTable;
    private PreparedStatement insert;

    private String createTableSql = "CREATE TABLE Person("
        + "id BIGINT GENERATED BY DEFAULT AS IDENTITY,"
        + "name VARCHAR(20),"
        + "surname VARCHAR(50),"
        + "age INT"
        + ")";

    private String insertSql ="INSERT INTO Person (name, surname, age) VALUES(?,?,?)";

    private PreparedStatement selectById;

    private String selectByIdSql = "SELECT * FROM Person WHERE id = ?";

    public PersonRepository(){
        try {
            connection = DriverManager.getConnection(url);
            createTable = connection.createStatement();
            insert = connection.prepareStatement(insertSql);
            selectById = connection.prepareStatement(selectByIdSql);

            boolean tableExists = false;
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            while(rs.next()){
                if("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))){
                    tableExists=true;
                    break;
                }
            }

            if(!tableExists)
                createTable.executeUpdate(createTableSql);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public Person get(int id){
        Person result = null;
        try{
            selectById.setInt(1, id);
            ResultSet rs = selectById.executeQuery();
            while(rs.next()){
                result = new Person();
                result.setId(rs.getInt("id"));
                result.setName(rs.getString("name"));
                result.setSurname(rs.getString("surname"));
                return result;
            }
        }catch(SQLException ex){
            ex.printStackTrace();
        }
        return null;
    }

    public List<Person> getAll() throws SQLException {
        List<Person> all_the_people = new ArrayList<Person>();

        String sql_text = "SELECT * FROM Person";
        PreparedStatement statement = connection.prepareStatement(sql_text);
        ResultSet rs = statement.executeQuery();

        Person person = null;
        while (rs.next()) {
            person = new Person();
            person.setId(rs.getInt("id"));
            person.setName(rs.getString("name"));
            person.setSurname(rs.getString("surname"));
            all_the_people.add(person);
        }

        return all_the_people;
    }
    public void delete(Person p) throws SQLException {
        String sql_text = "DELETE FROM Person WHERE id = ?";
        PreparedStatement statement = connection.prepareStatement(sql_text);
        statement.setInt(1, p.getId());
        statement.executeUpdate();
    }
    public List<Person> getByName(String name) throws SQLException {
        List<Person> people_with_matching_names = new ArrayList<Person>();
        String sql_text = "SELECT * FROM Person WHERE name like ?";
        PreparedStatement statement = connection.prepareStatement(sql_text);

        statement.setString(1, name);
        ResultSet rs = statement.executeQuery();

        Person a_person = null;
        while (rs.next()) {
            a_person = new Person();
            a_person.setId(rs.getInt("id"));
            a_person.setName(rs.getString("name"));
            a_person.setSurname(rs.getString("surname"));
            people_with_matching_names.add(a_person);
        }

        return people_with_matching_names;
    }


    public void add(Person person){
        try{
            insert.setString(1, person.getName());
            insert.setString(2, person.getSurname());
            insert.setInt(3, person.getAge());
            insert.executeUpdate();
        }catch(SQLException ex){
            ex.printStackTrace();
        }
    }
}
