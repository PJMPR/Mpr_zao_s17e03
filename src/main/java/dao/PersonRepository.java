package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.Person;

public class PersonRepository {

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private Connection connection;
	private Statement createTable;
	private PreparedStatement insert;
	
	private String createTableSql = "CREATE TABLE Person("
			+ "id BIGINT GENERATED BY DEFAULT AS IDENTITY,"
			+ "name VARCHAR(20),"
			+ "surname VARCHAR(50),"
			+ "age INT"
			+ ")";

	private String insertSql ="INSERT INTO Person (name, surname, age) VALUES(?,?,?)";
	
	private String deleteSql = "DELETE FROM Person WHERE id=?";
	
	private String selectAllSql = "SELECT * FROM Person"; 
	
	private PreparedStatement selectById;
	private PreparedStatement delete;
	private PreparedStatement selectAll;
	
	private String selectByIdSql = "SELECT * FROM Person"
			+ " WHERE id = ?"; 
	
	
	public PersonRepository(){
		
		try {
			connection = DriverManager.getConnection(url);
			createTable = connection.createStatement();
			
			boolean tableExists = false;
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			while(rs.next()){
				if("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))){
					tableExists=true;
					break;
				}
			}
			
			if(!tableExists)
				createTable.executeUpdate(createTableSql);
			

			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			delete = connection.prepareStatement(deleteSql);
			selectAll = connection.prepareStatement(selectAllSql);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	public Person get(int id){
		Person result = null;
		try{
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				result = new Person();
				result.setId(rs.getInt("id"));
				result.setName(rs.getString("name"));
				result.setSurname(rs.getString("surname"));
				return result;
			}
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}
	
	public List<Person> getAll(){
		List<Person> result = null;
		try{
			
			ResultSet rs = selectAll.executeQuery();
			result = new ArrayList<Person>();
			while(rs.next()){
				Person p = new Person();
				p.setId(rs.getInt("id"));
				p.setAge(rs.getInt("age"));
				p.setName(rs.getString("name"));
				p.setSurname(rs.getString("surname"));
				result.add(p);
			}
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		return result;
	}
	
	public void delete(Person p){
		try{
			
			delete.setInt(1, p.getId());
			delete.executeUpdate();
			
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
	
	public void add(Person person){
		try{
		insert.setString(1, person.getName());
		insert.setString(2, person.getSurname());
		insert.setInt(3, person.getAge());
		insert.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
	
}
